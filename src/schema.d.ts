/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/": {
    /**
     * Health Check
     * @description 動作確認ができます
     */
    get: operations["healthCheck"];
  };
  "/users/new": {
    /**
     * ユーザーを作成
     * @description ユーザーを作成します
     */
    post: operations["createUser"];
  };
  "/users/login": {
    /**
     * ログイン
     * @description ログインします
     */
    post: operations["login"];
  };
  "/projects": {
    /**
     * プロジェクトの一覧を取得
     * @description プロジェクトの一覧を取得します
     */
    get: operations["getProjects"];
  };
  "/projects/new": {
    /**
     * プロジェクトを作成
     * @description プロジェクトを作成します
     */
    post: operations["createProject"];
  };
  "/projects/{id}": {
    /**
     * プロジェクトの詳細を取得
     * @description プロジェクトの詳細を取得します
     */
    get: operations["getProject"];
    /**
     * プロジェクトを削除
     * @description プロジェクトを削除します
     */
    delete: operations["deleteProject"];
  };
  "/projects/{id}/new": {
    /**
     * フェーズを作成
     * @description フェーズを作成します
     */
    post: operations["createPhase"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    health: {
      /** @example Hello, World! */
      message?: string;
    };
    createUserRequest: {
      email?: string;
      password?: string;
      name?: string;
    };
    userCreatedResponse: {
      user?: {
        email?: string;
      };
    };
    loginRequest: {
      email?: string;
      password?: string;
    };
    loginResponse: {
      token?: string;
    };
    projectRequest: {
      title?: string;
      description?: string;
    };
    projectDataType: {
      /** Format: cuid */
      id?: string;
      /** Format: cuid */
      userId?: string;
      title?: string;
      description?: string;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
    };
    projecCreateResponse: {
      project?: components["schemas"]["projectDataType"];
    };
    projectResponse: {
      projects?: components["schemas"]["projectDataType"][];
    };
    phaseRequest: {
      questionBody?: {
        title?: string;
        content?: string[];
      };
      type?: string;
    };
    phaseData: {
      id?: string;
      questionBody?: string;
      type?: string;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
    };
    projectDetails: {
      project?: components["schemas"]["projectDataType"];
      question?: components["schemas"]["phaseData"];
      phases?: components["schemas"]["phaseData"][];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Health Check
   * @description 動作確認ができます
   */
  healthCheck: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["health"];
        };
      };
    };
  };
  /**
   * ユーザーを作成
   * @description ユーザーを作成します
   */
  createUser: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["createUserRequest"];
      };
    };
    responses: {
      /** @description Created */
      200: {
        content: {
          "application/json": components["schemas"]["userCreatedResponse"];
        };
      };
    };
  };
  /**
   * ログイン
   * @description ログインします
   */
  login: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["loginRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["loginResponse"];
        };
      };
    };
  };
  /**
   * プロジェクトの一覧を取得
   * @description プロジェクトの一覧を取得します
   */
  getProjects: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["projectResponse"];
        };
      };
    };
  };
  /**
   * プロジェクトを作成
   * @description プロジェクトを作成します
   */
  createProject: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["projectRequest"];
      };
    };
    responses: {
      /** @description Created */
      200: {
        content: {
          "application/json": components["schemas"]["projecCreateResponse"];
        };
      };
    };
  };
  /**
   * プロジェクトの詳細を取得
   * @description プロジェクトの詳細を取得します
   */
  getProject: {
    parameters: {
      path: {
        /** @description プロジェクトID */
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["projectDetails"];
        };
      };
    };
  };
  /**
   * プロジェクトを削除
   * @description プロジェクトを削除します
   */
  deleteProject: {
    parameters: {
      path: {
        /** @description プロジェクトID */
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["projecCreateResponse"];
        };
      };
    };
  };
  /**
   * フェーズを作成
   * @description フェーズを作成します
   */
  createPhase: {
    parameters: {
      path: {
        /** @description プロジェクトID */
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["phaseRequest"];
      };
    };
    responses: {
      /** @description Created */
      200: {
        content: {
          "application/json": components["schemas"]["phaseData"];
        };
      };
    };
  };
}
